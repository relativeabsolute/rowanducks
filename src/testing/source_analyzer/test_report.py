# script that checks aspects of the report generated by Source Analyzer
# (see verification Script Steps: 3.1-3.4)
# Author: Chris Curreri

import unittest
from src.SourceAnalyzer import SourceAnalyzer as SA


class TestReport(unittest.TestCase):
    analyzer_headings = "/expected_output/analyzer_headings.txt"
    # 3.1 test_report_format...ok
    # Will print ok if and only if the columns
    # string returned from a sample input file
    # matches report_column_headings.txt.
    def test_report_format(self):
        #self.assertEqual(SA.header_str(),self.analyzer_headings)
        pass

    # 3.2 test_num_errors...ok
    # Will print ok if and only if the summary returned by
    # sample code files contains numbers of files with incorrect
    # extensions and component name / filename mismatches
    # match the numbers in report_num_errors.txt.
    def test_num_errors(self):
        pass

    # 3.3 test_list_gt_250...ok
    # Will print ok if and only if the list of large
    # files matches those found in the list_250.txt.
    def test_list_gt_250(self):
        pass

    # 3.4 test_times...ok
    # Will print ok if and only if the main report string
    # contains a valid start time, completion time, and
    # the correct duration between them.
    def test_times(self):
        pass


if __name__ == "__main__":
    print("Running Test Report:")
    unittest.main()
